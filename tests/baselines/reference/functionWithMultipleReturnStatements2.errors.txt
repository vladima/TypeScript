==== tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements2.ts (9 errors) ====
    // return type of a function with multiple returns is the BCT of each return statement
    // no errors expected here
    
    function f1() {
        if (true) {
            return 1;
        } else {
            return null;
            ~~~~~~~~~~~~
!!! Unreachable code detected.
        }
    }
    
    function f2() {
        if (true) {
            return 1;
        } else if (false) {
            return null;
            ~~~~~~~~~~~~
!!! Unreachable code detected.
        } else {
            return 2;
            ~~~~~~~~~
!!! Unreachable code detected.
        }
    }
    
    function f4() {
        try {
            return 1;
        }
        catch (e) {
            return undefined;
        }
        finally {
            return 1;
        }
    }
    
    function f5() {
        return 1;
        return new Object();
        ~~~~~~~~~~~~~~~~~~~~
!!! Unreachable code detected.
    }
    
    function f6<T>(x: T) {
        if (true) {
            return x;
        } else {
            return null;
            ~~~~~~~~~~~~
!!! Unreachable code detected.
        }
    }
    
    //function f7<T extends U, U>(x: T, y: U) {
    //    if (true) {
    //        return x;
    //    } else {
    //        return y;
    //    }
    //}
    
    var a: { x: number; y?: number };
    var b: { x: number; z?: number };
    // returns typeof a
    function f9() {
        if (true) {
            return a;
        } else {
            return b;
            ~~~~~~~~~
!!! Unreachable code detected.
        }
    }
    
    // returns typeof b
    function f10() {
        if (true) {
            return b;
        } else {
            return a;
            ~~~~~~~~~
!!! Unreachable code detected.
        }
    }
    
    // returns number => void
    function f11() {
        if (true) {
            return (x: number) => { }
        } else {
            return (x: Object) => { }
            ~~~~~~~~~~~~~~~~~~~~~~~~~
!!! Unreachable code detected.
        }
    }
    
    // returns Object => void
    function f12() {
        if (true) {
            return (x: Object) => { }
        } else {
            return (x: number) => { }        
            ~~~~~~~~~~~~~~~~~~~~~~~~~
!!! Unreachable code detected.
        }
    }